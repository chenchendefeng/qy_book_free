package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wy.adbook.mvp.model.entity.book.bookread.ChapterListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_LIST_BEAN".
*/
public class ChapterListBeanDao extends AbstractDao<ChapterListBean, String> {

    public static final String TABLENAME = "CHAPTER_LIST_BEAN";

    /**
     * Properties of entity ChapterListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CBID = new Property(0, String.class, "cBID", false, "C_BID");
        public final static Property CCID = new Property(1, String.class, "cCID", true, "C_CID");
        public final static Property DurChapterName = new Property(2, String.class, "durChapterName", false, "DUR_CHAPTER_NAME");
        public final static Property Authority = new Property(3, String.class, "authority", false, "AUTHORITY");
        public final static Property AllWords = new Property(4, String.class, "allWords", false, "ALL_WORDS");
    }


    public ChapterListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_LIST_BEAN\" (" + //
                "\"C_BID\" TEXT," + // 0: cBID
                "\"C_CID\" TEXT PRIMARY KEY NOT NULL ," + // 1: cCID
                "\"DUR_CHAPTER_NAME\" TEXT," + // 2: durChapterName
                "\"AUTHORITY\" TEXT," + // 3: authority
                "\"ALL_WORDS\" TEXT);"); // 4: allWords
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChapterListBean entity) {
        stmt.clearBindings();
 
        String cBID = entity.getCBID();
        if (cBID != null) {
            stmt.bindString(1, cBID);
        }
 
        String cCID = entity.getCCID();
        if (cCID != null) {
            stmt.bindString(2, cCID);
        }
 
        String durChapterName = entity.getDurChapterName();
        if (durChapterName != null) {
            stmt.bindString(3, durChapterName);
        }
 
        String authority = entity.getAuthority();
        if (authority != null) {
            stmt.bindString(4, authority);
        }
 
        String allWords = entity.getAllWords();
        if (allWords != null) {
            stmt.bindString(5, allWords);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChapterListBean entity) {
        stmt.clearBindings();
 
        String cBID = entity.getCBID();
        if (cBID != null) {
            stmt.bindString(1, cBID);
        }
 
        String cCID = entity.getCCID();
        if (cCID != null) {
            stmt.bindString(2, cCID);
        }
 
        String durChapterName = entity.getDurChapterName();
        if (durChapterName != null) {
            stmt.bindString(3, durChapterName);
        }
 
        String authority = entity.getAuthority();
        if (authority != null) {
            stmt.bindString(4, authority);
        }
 
        String allWords = entity.getAllWords();
        if (allWords != null) {
            stmt.bindString(5, allWords);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public ChapterListBean readEntity(Cursor cursor, int offset) {
        ChapterListBean entity = new ChapterListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cBID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cCID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // durChapterName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // authority
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // allWords
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChapterListBean entity, int offset) {
        entity.setCBID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCCID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDurChapterName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthority(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAllWords(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChapterListBean entity, long rowId) {
        return entity.getCCID();
    }
    
    @Override
    public String getKey(ChapterListBean entity) {
        if(entity != null) {
            return entity.getCCID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChapterListBean entity) {
        return entity.getCCID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
